@model IEnumerable<PetStore.DATA.EF.Models.Product>



@{
    ViewData["Title"] = "Shop Products";
}

@*
    Steps to implement Datatables (for client-side search, filter, & page)
    1) (_Layout) add the <script> for jQuery.js -- ONLY if it doesn't already exist
    2) (_Layout) add the <script> for plugin.js (found on the plugin's website - either available from CDN or file download)
    3) (_Layout) add the <link> for plugin.css (if required - some plugins do not require any CSS)
    4) (Index) add/modify your HTML to fit the requirements of the plugin
    - Here, we use Datatables with the default scaffolded <table> from EF - we don't need to make any adjustments
    to implement the basic datatables functionality
    5) (Index) call the plugin function from @section Scripts { }
    6) (optional - CSS or Plugin Function) Customize the plugin - update styles, modifying the default implementation
*@

<section class="product_section layout_padding">
    <div class="container">
        <div class="heading-container heading-center">
            <h2 class="justify-content-center">
                Shop <span>Products</span>
            </h2>

            <p align="center">
                @if (User.IsInRole("Admin"))
                {
                    //The pipe delimiters (|) that were outside of the <a> tags were causing intellisense to
                    //assume we were switching BACK to C# mode.
                    //To make sure intellisense renders these as text and NOT c#, we can wrap everything in a <span>
                    <span>
                        <a asp-action="Create">Add New Product</a> |
                        <a asp-action="Discontinued">Discontinued Products</a> |
                    </span>
                }
                <button class="btn btn-rounded bg-secondary">
                <a asp-action="TiledProducts" style="color: white; font-weight: bold;">Tile View</a>
                </button>
            </p>

        </div>
        @* 
            DataTables requires a table with a thead and tbody, as well as a
            class or id attribute to be used for selecting via jQuery. The
            original, scaffolded table has everything we need.
        *@
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.ProductName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ProductPrice)
                    </th>
                    @*            <th>
                        @Html.DisplayNameFor(model => model.ProductDescription)
                        </th>
                        <th>
                        @Html.DisplayNameFor(model => model.UnitsInStock)
                        </th>
                        <th>
                        @Html.DisplayNameFor(model => model.UnitsOnOrder)
                        </th>
                        <th>
                        @Html.DisplayNameFor(model => model.IsDiscontinued)
                        </th>*@
                    <th>
                        @Html.DisplayNameFor(model => model.ProductImage)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Category)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Supplier)
                    </th>
                    <th></th>
                </tr>
            </thead>
         
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.ProductName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ProductPrice)
                        </td>
                        @*            <td>
                            @Html.DisplayFor(modelItem => item.ProductDescription)
                            </td>
                            <td>
                            @Html.DisplayFor(modelItem => item.UnitsInStock)
                            </td>
                            <td>
                            @Html.DisplayFor(modelItem => item.UnitsOnOrder)
                            </td>
                            <td>
                            @Html.DisplayFor(modelItem => item.IsDiscontinued)
                            </td>*@
                        <td>
                            @* @Html.DisplayFor(modelItem => item.ProductImage) *@
                            <img src="~/assets/img/@item.ProductImage" class="img-fluid" style="width:100px; height:100px;" alt="@item.ProductDescription" />
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Category.Animal)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Supplier.SupplierName)
                        </td>
                        <td>
                            @if (User.IsInRole("Admin"))
                            {
                                <span>
                                    <a asp-action="Edit" asp-route-id="@item.ProductId">Edit</a> |
                                </span>
                            }
                            <a asp-action="Details" asp-route-id="@item.ProductId">Details</a> 

                            @*
                                Conditional Delete Availability
                                - ONLY allow users to click on the delete button if the product is
                                not directly related to any order records.
                                - We'll check the Count() of related records for the product --> if the count is 0, allow delete.
                                Otherwise, disable the delete button
                            *@
                           @* @if (User.IsInRole("Admin"))
                            {
                                @if (item.OrderProducts.Count() == 0)//item.OrderProducts retrieves any related records for the Product
                                {
                                    <span>|</span>
                                    <a asp-action="Delete" asp-route-id="@item.ProductId">Delete</a>
                                }
                                else
                                {
                                    <span>|</span>
                                    <a disabled="disabled" class="text-danger text-decoration-line-through"
                           title="Cannot delete this Gadget as it is referenced by an Order">
                                        Delete
                                    </a>
                                }
                            }*@

                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
</section>

@*
    To implement DataTables on this page, we'll need to add a section
    for scripts, then call the plugin function. We can get the plugin
    function from https://datatables.net
*@

@section Scripts{
    <script>
        $(document).ready(function () {
            //Update the selector to target the element with the table class
            $('.table').DataTable();
        });
    </script>
}